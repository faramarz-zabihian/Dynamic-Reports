#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfReportService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ReportGenerator")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReportMakerInfo(ReportMakerInfo instance);
    partial void UpdateReportMakerInfo(ReportMakerInfo instance);
    partial void DeleteReportMakerInfo(ReportMakerInfo instance);
    #endregion
		
		public dbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Default"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ReportMakerInfo> ReportMakerInfos
		{
			get
			{
				return this.GetTable<ReportMakerInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportMakerInfo")]
	public partial class ReportMakerInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _AppLicationName;
		
		private string _UserId;
		
		private System.Data.Linq.Binary _UpdateDate;
		
		private System.Xml.Linq.XElement _ReportContent;
		
		private string _BasicTemplateName;
		
		private string _ReportName;
		
		private int _IsGeneral;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAppLicationNameChanging(string value);
    partial void OnAppLicationNameChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnUpdateDateChanging(System.Data.Linq.Binary value);
    partial void OnUpdateDateChanged();
    partial void OnReportContentChanging(System.Xml.Linq.XElement value);
    partial void OnReportContentChanged();
    partial void OnBasicTemplateNameChanging(string value);
    partial void OnBasicTemplateNameChanged();
    partial void OnReportNameChanging(string value);
    partial void OnReportNameChanged();
    partial void OnIsGeneralChanging(int value);
    partial void OnIsGeneralChanged();
    #endregion
		
		public ReportMakerInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppLicationName", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AppLicationName
		{
			get
			{
				return this._AppLicationName;
			}
			set
			{
				if ((this._AppLicationName != value))
				{
					this.OnAppLicationNameChanging(value);
					this.SendPropertyChanging();
					this._AppLicationName = value;
					this.SendPropertyChanged("AppLicationName");
					this.OnAppLicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportContent", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement ReportContent
		{
			get
			{
				return this._ReportContent;
			}
			set
			{
				if ((this._ReportContent != value))
				{
					this.OnReportContentChanging(value);
					this.SendPropertyChanging();
					this._ReportContent = value;
					this.SendPropertyChanged("ReportContent");
					this.OnReportContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicTemplateName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BasicTemplateName
		{
			get
			{
				return this._BasicTemplateName;
			}
			set
			{
				if ((this._BasicTemplateName != value))
				{
					this.OnBasicTemplateNameChanging(value);
					this.SendPropertyChanging();
					this._BasicTemplateName = value;
					this.SendPropertyChanged("BasicTemplateName");
					this.OnBasicTemplateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ReportName
		{
			get
			{
				return this._ReportName;
			}
			set
			{
				if ((this._ReportName != value))
				{
					this.OnReportNameChanging(value);
					this.SendPropertyChanging();
					this._ReportName = value;
					this.SendPropertyChanged("ReportName");
					this.OnReportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGeneral", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int IsGeneral
		{
			get
			{
				return this._IsGeneral;
			}
			set
			{
				if ((this._IsGeneral != value))
				{
					this.OnIsGeneralChanging(value);
					this.SendPropertyChanging();
					this._IsGeneral = value;
					this.SendPropertyChanged("IsGeneral");
					this.OnIsGeneralChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
